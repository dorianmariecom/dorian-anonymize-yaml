#!/usr/bin/env ruby
# frozen_string_literal: true

require "yaml"
require "dorian/arguments"

def anonymize_yaml(data)
  case data
  when Array
    data.map { |element| anonymize_yaml(element) }
  when Hash
    data.transform_values { |value| anonymize_yaml(value) }
  when String
    data.gsub(/[0-9]/, "0").gsub(/[a-z]/, "a").gsub(/[A-Z]/, "A")
  when Integer
    0
  when Float
    0.0
  when TrueClass, FalseClass
    false
  else
    raise NotImplementedError, data.class.name
  end
end

parsed = Dorian::Arguments.parse(version: { alias: :v }, help: { alias: :h })

abort parsed.help if parsed.options.help

if parsed.options.version
  abort File.read(File.expand_path("../../VERSION", __FILE__))
end

inputs = parsed.arguments + parsed.files.map { |file| File.read(file) }
inputs = [$stdin.each_line.to_a.join] if inputs.empty?

inputs.each { |input| puts anonymize_yaml(YAML.safe_load(input)).to_yaml }
